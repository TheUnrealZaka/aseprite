name: Build Aseprite Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Aseprite tag to build (e.g., v1.3.6). Leave empty for latest tag."
        required: false

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # 1. Checkout the code from your repository
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # We need submodules for the build
          submodules: 'recursive'
          # We need all tags to find the latest one, so fetch all history
          fetch-depth: 0 

      # 2. Setup the MSVC Developer Command Prompt
      - name: Setup MSVC Environment
        uses: ilammy/msvc-dev-cmd@v1

      # 3. Install Ninja build tool
      - name: Install Ninja
        uses: aseprite/get-ninja@main

      # 4. Determine which version to build (from input or latest tag)
      - name: Determine and Checkout Version
        id: version
        shell: cmd
        run: |
          set "VERSION=${{ github.event.inputs.version }}"
          
          rem If version input is empty, find the latest tag
          if "%VERSION%" == "" (
            echo "Version input empty, finding latest tag..."
            for /F "delims=" %%v in ('"git tag --sort=creatordate"') do (
              set "VERSION=%%v"
            )
          )
          
          echo "Building version: %VERSION%"
          
          rem Clean the repo and check out the specified tag
          call git clean --quiet -fdx
          call git reset --hard %VERSION% || echo "Failed to reset to tag %VERSION%" && exit /b 1
          
          rem Update submodules for that tag
          call git submodule update --init --recursive || echo "Failed to update submodules" && exit /b 1
          
          rem Pass the version to other steps
          echo "ASEPRITE_VERSION=%VERSION%" >> "%GITHUB_OUTPUT%"

      # 5. Patch the version number in the source code
      - name: Patch Version in CMakeLists.txt
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.ASEPRITE_VERSION }}"
          # Remove 'v' prefix (e.g., v1.3.6 -> 1.3.6)
          $versionNum = $version -replace '^v', ''
          (Get-Content -Path "src/ver/CMakeLists.txt") -replace '1.x-dev', $versionNum | Set-Content -Path "src/ver/CMakeLists.txt"

      # 6. Download the correct Skia library
      - name: Install Skia
        id: skia
        shell: cmd
        run: |
          set "ASEPRITE_VERSION=${{ steps.version.outputs.ASEPRITE_VERSION }}"
          
          rem Check for skia-tag.txt
          if exist "laf\misc\skia-tag.txt" (
            set /p SKIA_VERSION=<laf\misc\skia-tag.txt
          ) else (
            rem Check if version contains 'beta'
            if NOT "%ASEPRITE_VERSION:beta=%" == "%ASEPRITE_VERSION%" (
              set "SKIA_VERSION=m124-08a5439a6b"
            ) else (
              set "SKIA_VERSION=m102-861e4743af"
            )
          )
          
          echo "Using Skia version: %SKIA_VERSION%"
          
          if not exist "skia-%SKIA_VERSION%" (
            echo "Downloading Skia..."
            mkdir "skia-%SKIA_VERSION%"
            cd "skia-%SKIA_VERSION%"
            curl -sfLO https://github.com/aseprite/skia/releases/download/%SKIA_VERSION%/Skia-Windows-Release-x64.zip || echo "Failed to download Skia" && exit /b 1
            "C:\Program Files\7-Zip\7z.exe" x -y Skia-Windows-Release-x64.zip || echo "Failed to extract Skia" && exit /b 1
            cd ..
          ) else (
            echo "Skia version %SKIA_VERSION% already present."
          )
          
          rem Pass Skia version to next step
          echo "SKIA_VERSION=%SKIA_VERSION%" >> "%GITHUB_OUTPUT%"

      # 7. Configure and run the build with CMake and Ninja
      - name: Build Aseprite
        shell: cmd
        run: |
          if exist build rd /s /q build
          
          set "SKIA_VERSION=${{ steps.skia.outputs.SKIA_VERSION }}"
          set "SKIA_PATH=%CD%\skia-%SKIA_VERSION%"
          
          set LINK=opengl32.lib
          cmake.exe -G Ninja ^
            -S . ^
            -B build ^
            -DCMAKE_BUILD_TYPE=Release ^
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ^
            -DCMAKE_POLICY_DEFAULT_CMP0074=NEW ^
            -DCMAKE_POLICY_DEFAULT_CMP0091=NEW ^
            -DCMAKE_POLICY_DEFAULT_CMP0092=NEW ^
            -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
            -DENABLE_CCACHE=OFF ^
            -DOPENSSL_USE_STATIC_LIBS=TRUE ^
            -DLAF_BACKEND=skia ^
            -DSKIA_DIR="%SKIA_PATH%" ^
            -DSKIA_LIBRARY_DIR="%SKIA_PATH%\out\Release-x64" ^
            -DSKIA_OPENGL_LIBRARY= || echo "Failed to configure build" && exit /b 1
            
          ninja.exe -C build || echo "Build failed" && exit /b 1

      # 8. Create the portable package folder (MODIFIED STEP)
      - name: Package Release Files
        shell: cmd
        run: |
          set "VERSION=${{ steps.version.outputs.ASEPRITE_VERSION }}"
          set "FOLDER_NAME=aseprite-%VERSION%"
          
          mkdir %FOLDER_NAME%
          echo # This file is here so Aseprite behaves as a portable program >%FOLDER_NAME%\aseprite.ini
          
          rem Copy the 'docs' folder from the repo root
          xcopy /E /Q /Y docs %FOLDER_NAME%\docs\
          
          rem Copy ALL contents from 'build\bin' (exe, dlls, data folder, etc.)
          xcopy /E /Q /Y build\bin\*.* %FOLDER_NAME%\

      # 9. Create a Zip file of the package
      - name: Create Zip Archive
        id: package
        shell: cmd
        run: |
          set "VERSION=${{ steps.version.outputs.ASEPRITE_VERSION }}"
          set "FOLDER_NAME=aseprite-%VERSION%"
          set "ZIP_NAME=aseprite-%VERSION%-windows.zip"
          
          echo "Zipping folder: !FOLDER_NAME! into !ZIP_NAME!"
          "C:\Program Files\7-Zip\7z.exe" a -tzip !ZIP_NAME! .!FOLDER_NAME!\*
          
          rem Pass the zip name to the release step
          echo "ZIP_NAME=!ZIP_NAME!" >> "%GITHUB_OUTPUT%"

      # 10. Create an official GitHub Release and upload the Zip
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # This creates a release on the exact tag you're building
          tag_name: ${{ steps.version.outputs.ASEPRITE_VERSION }}
          name: "Aseprite ${{ steps.version.outputs.ASEPRITE_VERSION }}"
          body: "Automated Windows release for Aseprite ${{ steps.version.outputs.ASEPRITE_VERSION }}"
          # Upload the zip file created in the previous step
          files: ${{ steps.package.outputs.ZIP_NAME }}
        env:
          # This token is required to create releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
